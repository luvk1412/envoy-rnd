# Defines a GatewayClass that is a template for creating Gateways
# using a specific controller, in this case, the Envoy-based gateway controller.
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
---
# Defines a Gateway that uses the defined GatewayClass. This Gateway
# listens on HTTP protocol at port 80.
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
---
# ServiceAccount for backend services, used for Kubernetes access control.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend
---
# Defines the first backend service called 'backend1'.
# It labels the service and selects pods based on the 'app: backend1' label.
apiVersion: v1
kind: Service
metadata:
  name: backend1
  labels:
    app: backend1
    service: backend1
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  selector:
    app: backend1
---
# Defines the second backend service called 'backend2'.
# Similar to the first, but serves on a different port and targets pods with 'app: backend2'.
apiVersion: v1
kind: Service
metadata:
  name: backend2
  labels:
    app: backend2
    service: backend2
spec:
  ports:
    - name: http
      port: 3001
      targetPort: 3001
  selector:
    app: backend2
---
# Deployment for backend1. It sets up a pod with one replica,
# using the specified container image and exposing port 3000.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend1
  template:
    metadata:
      labels:
        app: backend1
    spec:
      serviceAccountName: backend
      containers:
        - image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
          imagePullPolicy: IfNotPresent
          name: backend1
          ports:
            - containerPort: 3000
---
# Similar to the above, but for backend2, using a different port (3001).
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend2
  template:
    metadata:
      labels:
        app: backend2
    spec:
      serviceAccountName: backend
      containers:
        - image: gcr.io/k8s-staging-gateway-api/echo-basic:v20231214-v1.0.0-140-gf544a46e
          imagePullPolicy: IfNotPresent
          name: backend2
          ports:
            - containerPort: 3001
---
# HTTPRoute for backend1, specifying hostnames and path prefixes that
# direct traffic to backend1.
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend1-route
spec:
  parentRefs:
    - name: eg
# If we enable hostname, we should send host header in request appropriately
#  hostnames:
#    - "www.example1.com"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: backend1
          port: 3000
      matches:
        - path:
            type: PathPrefix
            value: /service1
---
# HTTPRoute for backend2, designed to route traffic from a different hostname
# and path prefix to backend2.
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend2-route
spec:
  parentRefs:
    - name: eg
# If we enable hostname, we should send host header in request appropriately
#  hostnames:
#    - "www.example2.com"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: backend2
          port: 3001
      matches:
        - path:
            type: PathPrefix
            value: /service2
