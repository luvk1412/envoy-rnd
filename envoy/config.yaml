# Defines a GatewayClass that is a template for creating Gateways
# using a specific controller, in this case, the Envoy-based gateway controller.
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
  # parametersRef can be used by gateway providers to get information on what to use and what not
  parametersRef:
    group: gateway.envoyproxy.io
    kind: EnvoyProxy
    name: custom-proxy-config
    namespace: envoy-gateway-system
---
# Custom envoy proxy configuration
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyProxy
metadata:
  name: custom-proxy-config
  namespace: envoy-gateway-system
spec:
  provider:
    type: Kubernetes
    kubernetes:
      envoyDeployment:
        replicas: 1
  bootstrap:
    type: Replace
    value: |
      admin:
        access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/null
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 19000
      layered_runtime:
        layers:
          - name: global_config
            static_layer:
              envoy.restart_features.use_eds_cache_for_ads: true
              re2.max_program_size.error_level: 4294967295
              re2.max_program_size.warn_level: 1000
      dynamic_resources:
        ads_config:
          api_type: DELTA_GRPC
          transport_api_version: V3
          grpc_services:
            - envoy_grpc:
                cluster_name: xds_cluster
          set_node_on_first_message_only: true
        lds_config:
          ads: { }
          resource_api_version: V3
        cds_config:
          ads: { }
          resource_api_version: V3
      static_resources:
        listeners:
          - name: envoy-gateway-proxy-ready-0.0.0.0-19001
            address:
              socket_address:
                address: 0.0.0.0
                port_value: 19001
                protocol: TCP
            filter_chains:
              - filters:
                  - name: envoy.filters.network.http_connection_manager
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                      stat_prefix: eg-ready-http
                      route_config:
                        name: local_route
                        virtual_hosts:
                          - name: prometheus_stats
                            domains:
                              - "*"
                            routes:
                              - match:
                                  prefix: /stats/prometheus
                                route:
                                  cluster: prometheus_stats
                      http_filters:
                        - name: envoy.filters.http.health_check
                          typed_config:
                            "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                            pass_through_mode: false
                            headers:
                              - name: ":path"
                                string_match:
                                  exact: /ready
                        - name: envoy.filters.http.buffer
                          typed_config:
                            '@type': type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
                            maxRequestBytes: 52428800
                        - name: envoy.filters.http.router
                          typed_config:
                            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        clusters:
          - name: prometheus_stats
            connect_timeout: 0.250s
            type: STATIC
            lb_policy: ROUND_ROBIN
            load_assignment:
              cluster_name: prometheus_stats
              endpoints:
                - lb_endpoints:
                    - endpoint:
                        address:
                          socket_address:
                            address: 127.0.0.1
                            port_value: 19000
          - connect_timeout: 10s
            load_assignment:
              cluster_name: xds_cluster
              endpoints:
                - load_balancing_weight: 1
                  lb_endpoints:
                    - load_balancing_weight: 1
                      endpoint:
                        address:
                          socket_address:
                            address: envoy-gateway
                            port_value: 18000
            typed_extension_protocol_options:
              envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions"
                explicit_http_config:
                  http2_protocol_options:
                    connection_keepalive:
                      interval: 30s
                      timeout: 5s
            name: xds_cluster
            type: STRICT_DNS
            transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
                common_tls_context:
                  tls_params:
                    tls_maximum_protocol_version: TLSv1_3
                  tls_certificate_sds_secret_configs:
                    - name: xds_certificate
                      sds_config:
                        path_config_source:
                          path: "/sds/xds-certificate.json"
                        resource_api_version: V3
                  validation_context_sds_secret_config:
                    name: xds_trusted_ca
                    sds_config:
                      path_config_source:
                        path: "/sds/xds-trusted-ca.json"
                      resource_api_version: V3
---
# Defines a Gateway that uses the defined GatewayClass. This Gateway
# listens on HTTP protocol at port 80.
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
---
# ServiceAccount for backend services, used for Kubernetes access control.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend
---
# Defines the first backend service called 'backend1'.
# It labels the service and selects pods based on the 'app: backend1' label.
apiVersion: v1
kind: Service
metadata:
  name: backend1
  labels:
    app: backend1
    service: backend1
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: backend1
---
# Deployment for backend1. It sets up a pod with one replica,
# using the specified container image and exposing port 8080.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend1
  template:
    metadata:
      labels:
        app: backend1
    spec:
      serviceAccountName: backend
      containers:
        - image: python-echo:latest
          imagePullPolicy: IfNotPresent
          name: backend1
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080
---
# Defines the second backend service called 'backend2'.
# Similar to the first, but serves on a different port and targets pods with 'app: backend2'.
apiVersion: v1
kind: Service
metadata:
  name: backend2
  labels:
    app: backend2
    service: backend2
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: backend2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend2
  template:
    metadata:
      labels:
        app: backend2
    spec:
      serviceAccountName: backend
      containers:
        - image: python-echo:latest
          imagePullPolicy: IfNotPresent
          name: backend2
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080

---
# Auth Service
apiVersion: v1
kind: Service
metadata:
  name: auth
  labels:
    app: auth
    service: auth
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      serviceAccountName: backend
      containers:
        - image: python-auth:latest
          imagePullPolicy: IfNotPresent
          name: auth
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080

---
# HTTPRoute for backends, specifying hostnames and path prefixes that
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend-routes
spec:
  parentRefs:
    - name: eg
  # If we enable hostname, we should send host header in request appropriately
  #  hostnames:
  #    - "www.example1.com"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: backend1
          port: 8080
      matches:
        - path:
            type: PathPrefix
            value: /service1
    - backendRefs:
        - group: ""
          kind: Service
          name: backend2
          port: 8080
      matches:
        - path:
            type: PathPrefix
            value: /service2
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  name: ext-auth-example
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: backend-routes
  extAuth:
    http:
      backendRef:
        name: auth
        port: 8080
      headersToBackend: [ "x-Session-resp" ]
    headersToExtAuth: [ 'x-session-token' ]