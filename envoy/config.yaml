# Defines a GatewayClass that is a template for creating Gateways
# using a specific controller, in this case, the Envoy-based gateway controller.
apiVersion: gateway.networking.k8s.io/v1
kind: GatewayClass
metadata:
  name: eg
spec:
  controllerName: gateway.envoyproxy.io/gatewayclass-controller
  parametersRef:
    group: gateway.envoyproxy.io
    kind: EnvoyProxy
    name: custom-proxy-config
    namespace: envoy-gateway-system
---
# Defines a Gateway that uses the defined GatewayClass. This Gateway
# listens on HTTP protocol at port 80.
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: eg
spec:
  gatewayClassName: eg
  listeners:
    - name: http
      protocol: HTTP
      port: 80
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyProxy
metadata:
  name: custom-proxy-config
  namespace: envoy-gateway-system
spec:
  provider:
    type: Kubernetes
    kubernetes:
      envoyService:
        type: ClusterIP
      envoyDeployment:
        replicas: 1
# Below is enabled to run a sidecar along with envoy proxy
#        patch:
#          type: StrategicMerge
#          value:
#            spec:
#              template:
#                spec:
#                  # sidecar auth container
#                  containers:
#                    - name: auth-local
#                      image: python-auth:latest
#                      imagePullPolicy: IfNotPresent
#                      ports:
#                        - containerPort: 8080
#                  # this edits /etc/hosts for all containers
#                  # and adds ip address mapping for the given hostname
#                  hostAliases:
#                    - ip: "127.0.0.1"
#                      hostnames:
#                        - "localhost.localdomain"
---
#apiVersion: gateway.envoyproxy.io/v1alpha1
#kind: ClientTrafficPolicy
#metadata:
#  name: client-timeout
#spec:
#  targetRef:
#    group: gateway.networking.k8s.io
#    kind: Gateway
#    name: eg
#  timeout:
#    http:
#      requestReceivedTimeout: 5s
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: BackendTrafficPolicy
metadata:
  name: btp
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: backend-routes
  retry: { }
#  healthCheck:
#    active:
#      interval: "4s"
#      type: HTTP
#      http:
#        path: /status
#        expectedStatuses:
#          - 200
#    numRetries: 2
#    perRetry:
#      backOff:
#        baseInterval: 100ms
#        maxInterval: 10s
---
# ServiceAccount for backend services, used for Kubernetes access control.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend
---
# Defines the first backend service called 'backend1'.
# It labels the service and selects pods based on the 'app: backend1' label.
apiVersion: v1
kind: Service
metadata:
  name: backend1
  labels:
    app: backend1
    service: backend1
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: backend1
---
# Deployment for backend1. It sets up a pod with one replica,
# using the specified container image and exposing port 8080.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend1
  template:
    metadata:
      labels:
        app: backend1
    spec:
      serviceAccountName: backend
      containers:
        - image: python-echo:latest
          imagePullPolicy: IfNotPresent
          name: backend1
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080
---
# Defines the second backend service called 'backend2'.
# Similar to the first, but serves on a different port and targets pods with 'app: backend2'.
apiVersion: v1
kind: Service
metadata:
  name: backend2
  labels:
    app: backend2
    service: backend2
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: backend2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend2
  template:
    metadata:
      labels:
        app: backend2
    spec:
      serviceAccountName: backend
      containers:
        - image: python-echo:latest
          imagePullPolicy: IfNotPresent
          name: backend2
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080

---
# Auth Service
apiVersion: v1
kind: Service
metadata:
  name: auth
  labels:
    app: auth
    service: auth
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      serviceAccountName: backend
      containers:
        - image: python-auth:latest
          imagePullPolicy: IfNotPresent
          name: auth
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8080

---
# HTTPRoute for backends, specifying hostnames and path prefixes that
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: backend-routes
spec:
  parentRefs:
    - name: eg
  # If we enable hostname, we should send host header in request appropriately
  #  hostnames:
  #    - "www.example1.com"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: backend1
          port: 8080
      matches:
        - path:
            type: PathPrefix
            value: /service1/
      timeouts:
        request: "18s"
    - backendRefs:
        - group: ""
          kind: Service
          name: backend2
          port: 8080
      matches:
        - path:
            type: PathPrefix
            value: /service2/
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: SecurityPolicy
metadata:
  name: ext-auth-example
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: backend-routes
  extAuth:
    http:
      backendRefs:
        # point to a localhost headless service
        #        name: localhost-headless
        - name: auth
          port: 8080
      headersToBackend: [ "x-Session-resp" ]
      # this is done because original uri is always appended to this path,
      # hence we would want that to become a parameter
      path: /fa/auth?path=
    headersToExtAuth: [ 'x-session-token' ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: envoy-gateway-system
data:
  envoy-gateway.yaml: |
    apiVersion: gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    provider:
      type: Kubernetes
    gateway:
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
    extensionApis:
      enableEnvoyPatchPolicy: true
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: EnvoyPatchPolicy
metadata:
  name: custom-response-patch-policy
  namespace: default
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: eg
  type: JSONPatch
  jsonPatches:
    - type: "type.googleapis.com/envoy.config.listener.v3.Listener"
      # The listener name is of the form <GatewayNamespace>/<GatewayName>/<GatewayListenerName>
      name: default/eg/http
      operation:
        op: add
        path: "/default_filter_chain/filters/0/typed_config/http_filters/0"
        value:
          name: envoy.filters.http.buffer
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
            maxRequestBytes: 52428800
#          name: envoy.filters.http.filebuffer
#          typed_config:
#            '@type': type.googleapis.com/envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig
#            manager_config:
#              thread_pool:
#                thread_count: 2
#            request:
#              behavior:
#                fully_buffer: { }
#              memory_buffer_bytes_limit: 300000
#              storage_buffer_queue_high_watermark_bytes: 52428800
#              storage_buffer_bytes_limit: 52428800
---
# headless services
apiVersion: v1
kind: Service
metadata:
  name: localhost-headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
# endpoint for headless service which points to localhost.
# Note that localhost.localdomain is not a valid localhost domain.
# We need to add at as domain by either editing /etc/hosts in linux
# or use aliasHosts as done above(which ultimately edits that file only)
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: localhost-headless-es
  labels:
    kubernetes.io/service-name: localhost-headless
addressType: FQDN
ports:
  - name: http
    port: 8080
    protocol: TCP
endpoints:
  - addresses:
      - "localhost.localdomain"